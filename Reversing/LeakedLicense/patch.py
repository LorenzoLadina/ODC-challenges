import struct

# Desired binary file path and offset
binary_file = "./leaked_license_patch"
offset = 0x0000000000004060  # Replace with the correct offset in your file

# Array of `unsigned int` values to be written as 4-byte chunks
data = [
    0x0, 0x40000000, 0x20000000, 0x10000000, 0x0, 0x0, 0x2000000, 0x0,
    0x0, 0x400000, 0x200000, 0x0, 0x80000, 0x40000, 0x0, 0x0,
    0x8000, 0x4000, 0x2000, 0x1000, 0x800, 0x400, 0x0, 0x0,
    0x0, 0x0, 0x20, 0x0, 0x8, 0x4, 0x0, 0x1,
    0x0, 0x0, 0x20000000, 0x0, 0x0, 0x4000000, 0x2000000, 0x0,
    0x800000, 0x400000, 0x0, 0x0, 0x0, 0x40000, 0x20000, 0x0,
    0x8000, 0x4000, 0x0, 0x1000, 0x800, 0x400, 0x200, 0x0,
    0x80, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x0,
    0x80000000, 0x40000000, 0x0, 0x10000000, 0x8000000, 0x0, 0x2000000, 0x1000000,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x40000, 0x20000, 0x0,
    0x0, 0x4000, 0x0, 0x1000, 0x0, 0x400, 0x200, 0x0,
    0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x80000000, 0x0, 0x0, 0x10000000, 0x8000000, 0x0, 0x0, 0x1000000,
    0x800000, 0x400000, 0x200000, 0x100000, 0x0, 0x40000, 0x0, 0x10000,
    0x8000, 0x4000, 0x0, 0x0, 0x0, 0x400, 0x200, 0x100,
    0x80, 0x40, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0,
    0x80000000, 0x40000000, 0x0, 0x10000000, 0x8000000, 0x0, 0x2000000, 0x0,
    0x0, 0x400000, 0x0, 0x0, 0x80000, 0x40000, 0x20000, 0x10000,
    0x0, 0x4000, 0x0, 0x0, 0x800, 0x0, 0x0, 0x100,
    0x0, 0x0, 0x20, 0x10, 0x0, 0x0, 0x0, 0x0
]

# Open the binary file in read-write binary mode
with open(binary_file, "r+b") as f:
    # Seek to the desired offset
    f.seek(offset)

    # Write each `unsigned int` as a 4-byte binary value
    for value in data:
        f.write(struct.pack("<I", value))  # "<I" for little-endian unsigned int (4 bytes)

print("Binary file patched successfully!")

