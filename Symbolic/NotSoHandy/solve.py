import claripy
import angr
import logging
#logging.getLogger('angr').setLevel(logging.INFO)

precomputed_table = [
0x00, 0x00, 0x00, 0x00,
0x7F, 0xFF, 0xFF, 0xF7,
0xFF, 0xFF, 0xFF, 0xEE,
0x7F, 0xFF, 0xFF, 0xE5,
0xFF, 0xFF, 0xFF, 0xDC,
0x7F, 0xFF, 0xFF, 0xD3,
0xFF, 0xFF, 0xFF, 0xCA,
0x7F, 0xFF, 0xFF, 0xC1,
0xFF, 0xFF, 0xFF, 0xB8,
0x7F, 0xFF, 0xFF, 0xAF,
0xFF, 0xFF, 0xFF, 0xA6,
0x7F, 0xFF, 0xFF, 0x9D,
0xFF, 0xFF, 0xFF, 0x94,
0x7F, 0xFF, 0xFF, 0x8B,
0xFF, 0xFF, 0xFF, 0x82,
0x7F, 0xFF, 0xFF, 0x79,
0xFF, 0xFF, 0xFF, 0x71,
0x7F, 0xFF, 0xFF, 0x66,
0xFF, 0xFF, 0xFF, 0x5F,
0x7F, 0xFF, 0xFF, 0x54,
0xFF, 0xFF, 0xFF, 0x4D,
0x7F, 0xFF, 0xFF, 0x42,
0xFF, 0xFF, 0xFF, 0x3B,
0x7F, 0xFF, 0xFF, 0x30,
0xFF, 0xFF, 0xFF, 0x29,
0x7F, 0xFF, 0xFF, 0x1E,
0xFF, 0xFF, 0xFF, 0x17,
0x7F, 0xFF, 0xFF, 0x0C,
0xFF, 0xFF, 0xFF, 0x05,
0x7F, 0xFF, 0xFE, 0xFA,
0xFF, 0xFF, 0xFE, 0xF3,
0x7F, 0xFF, 0xFE, 0xE8,
0xFF, 0xFF, 0xFE, 0xE2,
0x7F, 0xFF, 0xFE, 0xD5,
0xFF, 0xFF, 0xFE, 0xCC,
0x7F, 0xFF, 0xFE, 0xC7,
0xFF, 0xFF, 0xFE, 0xBE,
0x7F, 0xFF, 0xFE, 0xB1,
0xFF, 0xFF, 0xFE, 0xA8,
0x7F, 0xFF, 0xFE, 0xA3,
0xFF, 0xFF, 0xFE, 0x9A,
0x7F, 0xFF, 0xFE, 0x8D,
0xFF, 0xFF, 0xFE, 0x84,
0x7F, 0xFF, 0xFE, 0x7F,
0xFF, 0xFF, 0xFE, 0x76,
0x7F, 0xFF, 0xFE, 0x69,
0xFF, 0xFF, 0xFE, 0x60,
0x7F, 0xFF, 0xFE, 0x5B,
0xFF, 0xFF, 0xFE, 0x53,
0x7F, 0xFF, 0xFE, 0x44,
0xFF, 0xFF, 0xFE, 0x3D,
0x7F, 0xFF, 0xFE, 0x36,
0xFF, 0xFF, 0xFE, 0x2F,
0x7F, 0xFF, 0xFE, 0x20,
0xFF, 0xFF, 0xFE, 0x19,
0x7F, 0xFF, 0xFE, 0x12,
0xFF, 0xFF, 0xFE, 0x0B,
0x7F, 0xFF, 0xFD, 0xFC,
0xFF, 0xFF, 0xFD, 0xF5,
0x7F, 0xFF, 0xFD, 0xEE,
0xFF, 0xFF, 0xFD, 0xE7,
0x7F, 0xFF, 0xFD, 0xD8,
0xFF, 0xFF, 0xFD, 0xD1,
0x7F, 0xFF, 0xFD, 0xCA,
0xFF, 0xFF, 0xFD, 0xC4,
0x7F, 0xFF, 0xFD, 0xB3,
0xFF, 0xFF, 0xFD, 0xAA,
0x7F, 0xFF, 0xFD, 0xA1,
0xFF, 0xFF, 0xFD, 0x98,
0x7F, 0xFF, 0xFD, 0x97,
0xFF, 0xFF, 0xFD, 0x8E,
0x7F, 0xFF, 0xFD, 0x85,
0xFF, 0xFF, 0xFD, 0x7C,
0x7F, 0xFF, 0xFD, 0x6B,
0xFF, 0xFF, 0xFD, 0x62,
0x7F, 0xFF, 0xFD, 0x59,
0xFF, 0xFF, 0xFD, 0x50,
0x7F, 0xFF, 0xFD, 0x4F,
0xFF, 0xFF, 0xFD, 0x46,
0x7F, 0xFF, 0xFD, 0x3D,
0xFF, 0xFF, 0xFD, 0x35,
0x7F, 0xFF, 0xFD, 0x22,
0xFF, 0xFF, 0xFD, 0x1B,
0x7F, 0xFF, 0xFD, 0x10,
0xFF, 0xFF, 0xFD, 0x09,
0x7F, 0xFF, 0xFD, 0x06,
0xFF, 0xFF, 0xFC, 0xFF,
0x7F, 0xFF, 0xFC, 0xF4,
0xFF, 0xFF, 0xFC, 0xED,
0x7F, 0xFF, 0xFC, 0xDA,
0xFF, 0xFF, 0xFC, 0xD3,
0x7F, 0xFF, 0xFC, 0xC8,
0xFF, 0xFF, 0xFC, 0xC1,
0x7F, 0xFF, 0xFC, 0xBE,
0xFF, 0xFF, 0xFC, 0xB7,
0x7F, 0xFF, 0xFC, 0xAC,
0xFF, 0xFF, 0xFC, 0xA6,
0x7F, 0xFF, 0xFC, 0x91,
0xFF, 0xFF, 0xFC, 0x88,
0x7F, 0xFF, 0xFC, 0x83,
0xFF, 0xFF, 0xFC, 0x7A,
0x7F, 0xFF, 0xFC, 0x75,
0xFF, 0xFF, 0xFC, 0x6C,
0x7F, 0xFF, 0xFC, 0x67,
0xFF, 0xFF, 0xFC, 0x5E,
0x7F, 0xFF, 0xFC, 0x49,
0xFF, 0xFF, 0xFC, 0x40,
0x7F, 0xFF, 0xFC, 0x3B,
0xFF, 0xFF, 0xFC, 0x32,
0x7F, 0xFF, 0xFC, 0x2D,
0xFF, 0xFF, 0xFC, 0x24,
0x7F, 0xFF, 0xFC, 0x1F,
0xFF, 0xFF, 0xFC, 0x17,
0x7F, 0xFF, 0xFC, 0x00,
0xFF, 0xFF, 0xFB, 0xF9,
0x7F, 0xFF, 0xFB, 0xF2,
0xFF, 0xFF, 0xFB, 0xEB,
0x7F, 0xFF, 0xFB, 0xE4,
0xFF, 0xFF, 0xFB, 0xDD,
0x7F, 0xFF, 0xFB, 0xD6,
0xFF, 0xFF, 0xFB, 0xCF,
0x7F, 0xFF, 0xFB, 0xB8,
0xFF, 0xFF, 0xFB, 0xB1,
0x7F, 0xFF, 0xFB, 0xAA,
0xFF, 0xFF, 0xFB, 0xA3,
0x7F, 0xFF, 0xFB, 0x9C,
0xFF, 0xFF, 0xFB, 0x95,
0x7F, 0xFF, 0xFB, 0x8E,
0xFF, 0xFF, 0xFB, 0x88,
0x7F, 0xFF, 0xFB, 0x7F,
0xFF, 0xFF, 0xFB, 0x66,
0x7F, 0xFF, 0xFB, 0x6D,
0xFF, 0xFF, 0xFB, 0x54,
0x7F, 0xFF, 0xFB, 0x5B,
0xFF, 0xFF, 0xFB, 0x42,
0x7F, 0xFF, 0xFB, 0x49,
0xFF, 0xFF, 0xFB, 0x30,
0x7F, 0xFF, 0xFB, 0x27,
0xFF, 0xFF, 0xFB, 0x2E,
0x7F, 0xFF, 0xFB, 0x15,
0xFF, 0xFF, 0xFB, 0x1C,
0x7F, 0xFF, 0xFB, 0x03,
0xFF, 0xFF, 0xFB, 0x0A,
0x7F, 0xFF, 0xFA, 0xF1,
0xFF, 0xFF, 0xFA, 0xF9,
0x7F, 0xFF, 0xFA, 0xEE,
0xFF, 0xFF, 0xFA, 0xD7,
0x7F, 0xFF, 0xFA, 0xDC,
0xFF, 0xFF, 0xFA, 0xC5,
0x7F, 0xFF, 0xFA, 0xCA,
0xFF, 0xFF, 0xFA, 0xB3,
0x7F, 0xFF, 0xFA, 0xB8,
0xFF, 0xFF, 0xFA, 0xA1,
0x7F, 0xFF, 0xFA, 0x96,
0xFF, 0xFF, 0xFA, 0x9F,
0x7F, 0xFF, 0xFA, 0x84,
0xFF, 0xFF, 0xFA, 0x8D,
0x7F, 0xFF, 0xFA, 0x72,
0xFF, 0xFF, 0xFA, 0x7B,
0x7F, 0xFF, 0xFA, 0x60,
0xFF, 0xFF, 0xFA, 0x6A,
0x7F, 0xFF, 0xFA, 0x5D,
0xFF, 0xFF, 0xFA, 0x44,
0x7F, 0xFF, 0xFA, 0x4F,
0xFF, 0xFF, 0xFA, 0x36,
0x7F, 0xFF, 0xFA, 0x39,
0xFF, 0xFF, 0xFA, 0x20,
0x7F, 0xFF, 0xFA, 0x2B,
0xFF, 0xFF, 0xFA, 0x12,
0x7F, 0xFF, 0xFA, 0x05,
0xFF, 0xFF, 0xFA, 0x0C,
0x7F, 0xFF, 0xF9, 0xF7,
0xFF, 0xFF, 0xF9, 0xFE,
0x7F, 0xFF, 0xF9, 0xE1,
0xFF, 0xFF, 0xF9, 0xE8,
0x7F, 0xFF, 0xF9, 0xD3,
0xFF, 0xFF, 0xF9, 0xDB,
0x7F, 0xFF, 0xF9, 0xCC,
0xFF, 0xFF, 0xF9, 0xB5,
0x7F, 0xFF, 0xF9, 0xBE,
0xFF, 0xFF, 0xF9, 0xA7,
0x7F, 0xFF, 0xF9, 0xA8,
0xFF, 0xFF, 0xF9, 0x91,
0x7F, 0xFF, 0xF9, 0x9A,
0xFF, 0xFF, 0xF9, 0x83,
0x7F, 0xFF, 0xF9, 0x74,
0xFF, 0xFF, 0xF9, 0x7D,
0x7F, 0xFF, 0xF9, 0x66,
0xFF, 0xFF, 0xF9, 0x6F,
0x7F, 0xFF, 0xF9, 0x50,
0xFF, 0xFF, 0xF9, 0x59,
0x7F, 0xFF, 0xF9, 0x42,
0xFF, 0xFF, 0xF9, 0x4C,
0x7F, 0xFF, 0xF9, 0x3B,
0xFF, 0xFF, 0xF9, 0x22,
0x7F, 0xFF, 0xF9, 0x29,
0xFF, 0xFF, 0xF9, 0x10,
0x7F, 0xFF, 0xF9, 0x1F,
0xFF, 0xFF, 0xF9, 0x06,
0x7F, 0xFF, 0xF9, 0x0D,
0xFF, 0xFF, 0xF8, 0xF4,
0x7F, 0xFF, 0xF8, 0xE3,
0xFF, 0xFF, 0xF8, 0xEA,
0x7F, 0xFF, 0xF8, 0xD1,
0xFF, 0xFF, 0xF8, 0xD8,
0x7F, 0xFF, 0xF8, 0xC7,
0xFF, 0xFF, 0xF8, 0xCE,
0x7F, 0xFF, 0xF8, 0xB5,
0xFF, 0xFF, 0xF8, 0xBD,
0x7F, 0xFF, 0xF8, 0xAA,
0xFF, 0xFF, 0xF8, 0x93,
0x7F, 0xFF, 0xF8, 0x98,
0xFF, 0xFF, 0xF8, 0x81,
0x7F, 0xFF, 0xF8, 0x8E,
0xFF, 0xFF, 0xF8, 0x77,
0x7F, 0xFF, 0xF8, 0x7C,
0xFF, 0xFF, 0xF8, 0x65,
0x7F, 0xFF, 0xF8, 0x52,
0xFF, 0xFF, 0xF8, 0x5B,
0x7F, 0xFF, 0xF8, 0x40,
0xFF, 0xFF, 0xF8, 0x49,
0x7F, 0xFF, 0xF8, 0x36,
0xFF, 0xFF, 0xF8, 0x3F,
0x7F, 0xFF, 0xF8, 0x24,
0xFF, 0xFF, 0xF8, 0x2E,
0x7F, 0xFF, 0xF8, 0x19,
0xFF, 0xFF, 0xF8, 0x00,
0x7F, 0xFF, 0xF8, 0x0B,
0xFF, 0xFF, 0xF7, 0xF2,
0x7F, 0xFF, 0xF7, 0xFD,
0xFF, 0xFF, 0xF7, 0xE4,
0x7F, 0xFF, 0xF7, 0xEF,
0xFF, 0xFF, 0xF7, 0xD6,
0x7F, 0xFF, 0xF7, 0xC1,
0xFF, 0xFF, 0xF7, 0xC8,
0x7F, 0xFF, 0xF7, 0xB3,
0xFF, 0xFF, 0xF7, 0xBA,
0x7F, 0xFF, 0xF7, 0xA5,
0xFF, 0xFF, 0xF7, 0xAC,
0x7F, 0xFF, 0xF7, 0x97,
0xFF, 0xFF, 0xF7, 0x9F,
0x7F, 0xFF, 0xF7, 0x88,
0xFF, 0xFF, 0xF7, 0x71,
0x7F, 0xFF, 0xF7, 0x7A,
0xFF, 0xFF, 0xF7, 0x63,
0x7F, 0xFF, 0xF7, 0x6C,
0xFF, 0xFF, 0xF7, 0x55,
0x7F, 0xFF, 0xF7, 0x5E,
0xFF, 0xFF, 0xF7, 0x47,
0x7F, 0xFF, 0xF7, 0x30,
0xFF, 0xFF, 0xF7, 0x39,
0x7F, 0xFF, 0xF7, 0x22,
0xFF, 0xFF, 0xF7, 0x2B,
0x7F, 0xFF, 0xF7, 0x14,
0xFF, 0xFF, 0xF7, 0x1D,
0x00, 0x00, 0x00, 0x00
]

def xhashe_hook(state):
    input_ptr = state.solver.eval(state.regs.rdi)  # Input pointer
    length = state.solver.eval(state.regs.rsi)    # Length of input
    seed = state.solver.eval(state.regs.rdx)      # Initial seed

    input_data = state.memory.load(input_ptr, length, endness='Iend_BE')
    input_bytes = state.solver.eval(input_data, cast_to=bytes)

    # Hash computation
    result = seed
    for b in input_bytes:
        high_byte = (result >> 24) & 0xFF
        result = precomputed_table[high_byte ^ b] ^ (result << 8)

    state.regs.rax = result  # Return hash in RAX

def comput_value(a1):
    """
    Implements the comput_value function.
    """
    high_nibble = a1 >> 4
    multiplied = 2147483639 * a1
    return high_nibble ^ multiplied

def xhashe_slow_hook(state):
    """
    Hook implementation for xhashe_slow.
    """
    input_ptr = state.solver.eval(state.regs.rdi)  # Input pointer
    length = state.solver.eval(state.regs.rsi)    # Length of input
    seed = state.solver.eval(state.regs.rdx)      # Initial seed

    # Read the input data
    input_data = state.memory.load(input_ptr, length, endness='Iend_BE')
    input_bytes = state.solver.eval(input_data, cast_to=bytes)

    # Compute the hash
    result = seed
    for b in input_bytes:
        high_byte = (result >> 24) & 0xFF
        computed = comput_value(high_byte ^ b)
        result = computed ^ (result << 8)

    state.regs.rax = result  # Return result in RAX


proj = angr.Project("./notsohandy")
proj.hook(0x1180 + 0x00400000, xhashe_hook)
proj.hook(0x11E8 + 0x00400000, xhashe_slow_hook)
options = {angr.options.LAZY_SOLVES}

input_length = 50
argv = ['./notsohandy']
argv1 = claripy.BVS('argv1', input_length*8) # symbolic input of 50 bytes
argv.append(argv1)

initial_state = proj.factory.entry_state(args=argv, add_options=options)

for i in range(input_length):
    char = argv1.get_byte(i)
    initial_state.solver.add(char > 64) 
    initial_state.solver.add(char < 127)

to_find = 0x1422 + 0x00400000
to_avoid = [0x13DC + 0x00400000, 0x1433 + 0x00400000]

# print(f'to avoid function address: {hex(to_avoid[0])} , {hex(to_avoid[1])}')
# print(f'to find function address: {hex(to_find)}')


simgr = proj.factory.simulation_manager(initial_state)
simgr.explore(find=to_find, avoid=to_avoid)

if simgr.found:
    print(simgr.found[0].posix.dumps(0)) # dump content of stdin
